# frozen_string_literal: true

# app.rb (–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å API)
require 'sinatra'
require 'json'
require 'telegram/bot'
require 'byebug'
require 'jwt'
require 'openssl'
require 'dotenv'

Dotenv.load

BOT_TOKEN = ENV['BOT_TOKEN']
WEBHOOK_URL = "#{ENV['NGROK_ID']}.ngrok-free.app/webhook"
HOST_URL = "#{ENV['NGROK_ID']}.ngrok-free.app"
WEB_APP_URL = ENV['WEB_APP_URL']
JWT_SECRET = "test_secret_key"

configure do
  # Configure permitted hosts for all environments
  set :host_authorization, { permitted_hosts: [HOST_URL, "127.0.0.1", "::1", "localhost"] }
end

before do
  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS (–≤–∞–∂–Ω–æ –¥–ª—è WebApp!)
  headers 'Access-Control-Allow-Origin' => '*',
          'Access-Control-Allow-Methods' => ['OPTIONS', 'GET', 'POST', 'PUT', 'DELETE'],
          'Access-Control-Allow-Headers' => 'Content-Type'

  request.body.rewind
  @data = JSON.parse(request.body.read) rescue {}
end

get '/' do
  'Hello, World!'
end

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
Telegram::Bot::Client.run(BOT_TOKEN) do |bot|
  bot.api.set_webhook(url: WEBHOOK_URL)
  puts "–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: #{WEBHOOK_URL}"
end

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
post '/webhook' do
  bot = Telegram::Bot::Client.new(BOT_TOKEN)
  message = @data['message']
  web_app_data = @data['web_app_data']

  puts "–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: #{JSON.pretty_generate(@data)}"

  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if message
    chat_id = message['chat']['id']
    text = message['text']

    case text
    when '/start'
      markup = Telegram::Bot::Types::ReplyKeyboardMarkup.new(
        keyboard: [
          [{ text: 'QR' }, { text: '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' }],
          [{ text: '–ê–∫—Ü–∏–∏' }, { text: '–ó–∞–∫–∞–∑—ã' }]
        ],
        resize_keyboard: true # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      )

      bot.api.send_message(chat_id: chat_id, text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup: markup)
    when 'QR'
      bot.api.send_message(chat_id: chat_id, text: '–ó–¥–µ—Å—å –±—É–¥–µ—Ç QR-–∫–æ–¥')
    when '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
      inline_markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [{
            text: 'üçï –ó–∞–∫–∞–∑–∞—Ç—å',
            web_app: { url: "#{WEB_APP_URL}?screen=menu&another_param=another_value1" }
          }]
        ]
      )

      bot.api.send_message(chat_id: chat_id, text: '–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–µ–ª–∞–π —Å–∞–º—ã–π –≤–∫—É—Å–Ω—ã–π –∑–∞–∫–∞–∑', reply_markup: inline_markup)
    when '–ê–∫—Ü–∏–∏'
      inline_markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [{
            text: 'üçï –ê–∫—Ü–∏–∏',
            web_app:  { url: "#{WEB_APP_URL}?screen=promotions&another_param=another_value2" }
          }]
        ]
      )

      bot.api.send_message(chat_id: chat_id, text: '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π', reply_markup: inline_markup)
    when '–ó–∞–∫–∞–∑—ã'
      inline_markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [{
            text: 'üçï –ó–∞–∫–∞–∑—ã',
            web_app:  { url: "#{WEB_APP_URL}?screen=orders&another_param=another_value3" }
          }]
        ]
      )

      bot.api.send_message(chat_id: chat_id, text: '–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –ø–æ–π–¥–µ—à—å - –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ—à—å', reply_markup: inline_markup)
    end

  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (WebApp)
  elsif web_app_data
    user_id = @data['from']['id']
    data = JSON.parse(web_app_data['data'])

    bot.api.send_message(chat_id: user_id, text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –í—ã –≤—ã–±—Ä–∞–ª–∏: #{data['pizza']} –∑–∞ #{data['price']} ‚ÇΩ.")
  end

  status 200
end

# –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /auth
options '/auth' do
  status 200
end

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
post '/auth' do
  unless @data['initData'] && valid_init_data?(@data['initData'], BOT_TOKEN)
    return { error: 'Invalid initData' }.to_json
  end

  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ initData
  init_data = URI.decode_www_form(@data['initData']).to_h
  user_id = JSON.parse(init_data['user'])['id'] rescue nil

  unless user_id
    return { error: 'User ID not found' }.to_json
  end

  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
  tokens = generate_tokens(user_id)

  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
  {
    status: 'success',
    tokens: tokens,
    user_id: user_id
  }.to_json
end

# –í–∞–ª–∏–¥–∞—Ü–∏—è initData –∏–∑ Telegram
def valid_init_data?(init_data_str, bot_token)
  init_data = URI.decode_www_form(init_data_str).to_h
  secret_key = OpenSSL::HMAC.digest('sha256', 'WebAppData', bot_token)
  data_check = init_data.except('hash').sort.map { |k, v| "#{k}=#{v}" }.join("\n")
  computed_hash = OpenSSL::HMAC.hexdigest('sha256', secret_key, data_check)
  computed_hash == init_data['hash']
end

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT-—Ç–æ–∫–µ–Ω–æ–≤
def generate_tokens(user_id)
  access_token = JWT.encode(
    { user_id: user_id, exp: Time.now.to_i + 3600 }, # 1 —á–∞—Å
    JWT_SECRET,
    'HS256'
  )

  refresh_token = JWT.encode(
    { user_id: user_id, exp: Time.now.to_i + 86400 * 7 }, # 7 –¥–Ω–µ–π
    JWT_SECRET,
    'HS256'
  )

  { access_token: access_token, refresh_token: refresh_token }
end

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
puts "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É #{settings.port}"